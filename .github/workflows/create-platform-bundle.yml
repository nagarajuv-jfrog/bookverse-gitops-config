name: 'Create Platform Release Bundle'

on:
  workflow_dispatch:
    inputs:
      platform_version:
        description: 'Platform Bundle Version (e.g., 4.0.0). Optional: leave blank to auto-increment.'
        required: false
  schedule:
    # Runs every other Monday at 05:00 UTC (8 AM IDT)
    - cron: '0 5 * * 1'

jobs:
  create-bundle:
    runs-on: ubuntu-latest
    steps:
      - name: Check if it is an even week to run
        if: github.event_name == 'schedule'
        run: |
          # Run only on even-numbered weeks of the year
          if (( $(date +%U) % 2 != 0 )); then
            echo "Skipping run on odd-numbered week: $(date +%U)"
            exit 78
          fi
          echo "Running on even-numbered week: $(date +%U)"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"

      - name: Determine Next Platform Version
        id: determine_version
        run: |
          # If a version was manually provided, use it.
          if [ -n "${{ github.event.inputs.platform_version }}" ]; then
            echo "Using user-provided version: ${{ github.event.inputs.platform_version }}"
            echo "platform_version=${{ github.event.inputs.platform_version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Otherwise, find the latest and increment the patch.
          echo "Finding latest platform version to auto-increment..."
          LATEST_PLATFORM_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/bookverse-platform?project=bookverse&order_by=release_bundle_semver&direction=desc" | jq -r '.release_bundles[0].release_bundle_version')

          if [[ "$LATEST_PLATFORM_VERSION" == "null" ]]; then
            echo "No previous platform bundle found. Starting with 4.0.0."
            NEXT_VERSION="4.0.0"
          else
            echo "Latest platform version is $LATEST_PLATFORM_VERSION"
            # Use awk to increment the patch version
            NEXT_VERSION=$(echo $LATEST_PLATFORM_VERSION | awk -F. -v OFS=. '{$NF++;print}')
          fi

          echo "Next platform version will be $NEXT_VERSION"
          echo "platform_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Find Latest Microservice Versions
        id: find_versions
        run: |
          # Define the services that make up our platform
          SERVICES=("inventory-service" "recommendations-service" "checkout-service")
          SOURCES_JSON="["

          for SERVICE in "${SERVICES[@]}"; do
            echo "Finding latest version for $SERVICE..."
            # Use the API to get all versions for a bundle, sorted by SemVer descending, then use jq to get the first one
            LATEST_VERSION=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/${SERVICE}?project=bookverse&order_by=release_bundle_semver&direction=desc" | jq -r '.release_bundles[0].release_bundle_version')

            if [[ "$LATEST_VERSION" == "null" ]]; then
              echo "::error::Could not find any release bundles for $SERVICE. Please ensure at least one has been created."
              exit 1
            fi

            echo "Latest version for $SERVICE is $LATEST_VERSION"
            SOURCES_JSON+="{\"project_key\":\"bookverse\",\"release_bundle_name\":\"$SERVICE\",\"release_bundle_version\":\"$LATEST_VERSION\"},"
          done

          # Remove trailing comma and close the JSON array
          SOURCES_JSON=$(echo $SOURCES_JSON | sed 's/,$//')
          SOURCES_JSON+="]"

          echo "Constructed sources: $SOURCES_JSON"
          echo "sources_json=$SOURCES_JSON" >> $GITHUB_OUTPUT

      - name: Create Platform Release Bundle
        env:
          SOURCES_JSON: ${{ steps.find_versions.outputs.sources_json }}
          PLATFORM_VERSION: ${{ steps.determine_version.outputs.platform_version }}
        run: |
          echo "Creating platform bundle version: $PLATFORM_VERSION"

          # Construct the JSON payload and pipe it directly to curl
          jq -n \
            --arg name "bookverse-platform" \
            --arg version "$PLATFORM_VERSION" \
            --argjson sources "$SOURCES_JSON" \
            '{
              "release_bundle_name": $name,
              "release_bundle_version": $version,
              "sources": [
                {
                  "source_type": "release_bundles",
                  "release_bundles": $sources
                }
              ]
            }' | curl -X POST -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" -H "Content-Type: application/json" \
            --data @- \
            "${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle?project=bookverse"
