name: 'Promote Platform Bundle to PROD'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version of the hc-bookverse-platform release bundle to promote (e.g., 4.0.1)'
        required: true
        default: '1.0.'
run-name: Promote ${{ github.event.inputs.bundle_name }} v${{ github.event.inputs.bundle_ver }} to PROD

jobs:
  promote-sequentially:
    runs-on: ubuntu-latest
    steps:
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "hc-bookverse"

      - name: Create and Attach Commit Review Evidence (Pre-DEV Gate)
        run: |
          # Randomly select committer and reviewer
          committers=("dev-a@bookverse.com" "dev-b@bookverse.com" "dev-c@bookverse.com")
          reviewers=("qa-a@bookverse.com" "qa-b@bookverse.com" "lead@bookverse.com")
          statuses=("Approved" "Approved" "Approved" "Requires Changes")
          
          committer=${committers[$RANDOM % ${#committers[@]}]}
          reviewer=${reviewers[$RANDOM % ${#reviewers[@]}]}
          status=${statuses[$RANDOM % ${#statuses[@]}]}

          cat <<EOF > commit-review.json
          {
            "attributes": [
              { "name": "committer", "value": "$committer" },
              { "name": "reviewer", "value": "$reviewer" },
              { "name": "review_status", "value": "$status" }
            ]
          }
          EOF

          # Create Markdown Evidence
          cat <<EOF > commit-review.md
          # Commit Review Evidence
          This evidence attests that the code has passed the peer review gate.
          | Field         | Value        |
          |---------------|--------------|
          | **Committer** | \`$committer\` |
          | **Reviewer** | \`$reviewer\`  |
          | **Status** | **$status** |
          EOF

          jf evd create --predicate commit-review.json \
          --predicate-type "Attribute Report" --markdown commit-review.md \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to DEV
        run: |
          echo "Promoting hc-bookverse-platform version ${{ github.event.inputs.version }} to DEV..."
          jfrog rbp hc-bookverse-platform ${{ github.event.inputs.version }} DEV \
            --project=hc-bookverse \
            --include-repos='hc-bookverse-docker-external' \
            --promotion-type=move

      - name: Create and Attach DEV Smoke Test Evidence (QA Gate)
        run: |
          # Generate random test results
          passed_tests=$((RANDOM % 3 + 1))
          failed_tests=$((3 - passed_tests))
          
          # Calculate duration and fix potential leading dot from bc
          duration_raw=$(echo "scale=2; $RANDOM/1000" | bc)
          if [[ $duration_raw == .* ]]; then
            duration="0$duration_raw"
          else
            duration="$duration_raw"
          fi

          api_duration=$((RANDOM % 200 + 50))
          db_duration=$((RANDOM % 100 + 20))
          frontend_duration=$((RANDOM % 15000 + 5000))
          test_result=$(if [ $failed_tests -eq 0 ]; then echo "PASSED"; else echo "FAILED"; fi)

          cat <<EOF > dev-smoke-test.json
          {
            "summary": {
              "result": "$test_result",
              "test_suite": "Smoke Tests (ran in DEV)",
              "total_tests": 3,
              "passed": $passed_tests,
              "failed": $failed_tests,
              "duration_seconds": $duration
            },
            "tests": [
              { "name": "API Endpoint Connectivity", "status": "PASSED", "duration_ms": $api_duration },
              { "name": "Database Connection", "status": "PASSED", "duration_ms": $db_duration },
              { "name": "Frontend Load Test", "status": "$test_result", "duration_ms": $frontend_duration }
            ]
          }
          EOF

          # Create Markdown Evidence
          cat <<EOF > dev-smoke-test.md
          # DEV Smoke Test Results
          - **Result:** $test_result
          - **Duration:** ${duration}s
          | Test Case                   | Status | Duration (ms) |
          |-----------------------------|--------|---------------|
          | API Endpoint Connectivity   | PASSED | $api_duration     |
          | Database Connection         | PASSED | $db_duration      |
          | Frontend Load Test          | $test_result | $frontend_duration  |
          EOF

          jf evd create --predicate dev-smoke-test.json \
          --predicate-type "Test Results" --markdown dev-smoke-test.md \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to QA
        run: |
          echo "Promoting hc-bookverse-platform version ${{ github.event.inputs.version }} to QA..."
          jfrog rbp hc-bookverse-platform ${{ github.event.inputs.version }} QA \
            --project=hc-bookverse \
            --include-repos='hc-bookverse-docker-external' \
            --promotion-type=move

      - name: Create and Attach QA Test & Jira Evidence (STAGE Gate)
        run: |
          # Generate random QA test results
          passed_qa=$((RANDOM % 100 + 250))
          failed_qa=$((RANDOM % 5))
          skipped_qa=$((RANDOM % 5))
          duration_qa=$((RANDOM % 60 + 90))
          qa_result=$(if [ $failed_qa -eq 0 ]; then echo "PASSED"; else echo "FAILED"; fi)

          # Create QA Test JSON and Markdown
          cat <<EOF > qa-test-results.json
          {
            "result": "$qa_result",
            "duration": "${duration_qa}s",
            "passed": $passed_qa,
            "failed": $failed_qa,
            "skipped": $skipped_qa,
            "test_suite": "QA Regression Suite (ran in QA)"
          }
          EOF
          cat <<EOF > qa-test-results.md
          # QA Regression Suite Results
          | Metric  | Value     |
          |---------|-----------|
          | Result  | $qa_result  |
          | Passed  | $passed_qa  |
          | Failed  | $failed_qa  |
          | Skipped | $skipped_qa |
          | Duration| ${duration_qa}s |
          EOF

          # Create Jira Issues JSON and Markdown
          cat <<EOF > qa-jira-issues.json
          {
            "attributes": [
              {
                "name": "jira_integration",
                "value": {
                  "server_url": "https://bookverse.atlassian.net",
                  "query": "fixVersion = ${{ needs.build-and-publish.outputs.version }} AND status in (Resolved, Closed)",
                  "issues_found": 2,
                  "issues": [
                    {
                      "key": "BOOK-101",
                      "summary": "UI glitch on checkout page for large orders",
                      "status": "Closed",
                      "priority": "High"
                    },
                    {
                      "key": "BOOK-105",
                      "summary": "API returns 500 error when book stock is zero",
                      "status": "Resolved",
                      "priority": "Medium"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          cat <<EOF > qa-jira-issues.md
          # Jira Issue Tracking
          This evidence shows all Jira tickets resolved in this version.
          - **Jira Query:** \`fixVersion = ${{ needs.build-and-publish.outputs.version }} AND status in (Resolved, Closed)\`
          - **Issues Found:** 2
          ### Resolved Issues
          1.  **BOOK-101:** UI glitch on checkout page for large orders (Status: Closed)
          2.  **BOOK-105:** API returns 500 error when book stock is zero (Status: Resolved)
          EOF

          jf evd create --predicate qa-test-results.json \
          --predicate-type "Test Results" --markdown qa-test-results.md \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

          jf evd create --predicate qa-jira-issues.json \
          --predicate-type "Attribute Report" --markdown qa-jira-issues.md \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Create and Attach STAGE Sign-off & Trace Evidence (Gate to PROD)
        run: |
          # Randomly select an approver
          approvers=("product-manager-a@bookverse.com" "product-manager-b@bookverse.com" "cto@bookverse.com")
          approver=${approvers[$RANDOM % ${#approvers[@]}]}
          trace_id="trace-$(openssl rand -hex 8)"

          cat <<EOF > stage-signoff.json
          {
            "attributes": [
              { "name": "quality_gate_passed", "value": true },
              { "name": "approved_by", "value": "$approver" }
            ]
          }
          EOF
          
          cat <<EOF > stage-signoff.md
          # STAGE Sign-off
          | Field         | Value      |
          |---------------|------------|
          | **Approved By** | \`$approver\`|
          | **Gate Status** | PASSED     |
          EOF

          cat <<EOF > stage-runtime-trace.json
          {
            "trace_id": "$trace_id",
            "environment": "STAGE",
            "status": "SUCCESS",
            "duration": "7200s",
            "details": "Application ran successfully under load test in staging environment."
          }
          EOF
          
          cat <<EOF > stage-runtime-trace.md
          # STAGE Runtime Trace
          - **Environment:** STAGE
          - **Status:** SUCCESS
          - **Trace ID:** \`$trace_id\`
          EOF

          jf evd create --predicate stage-signoff.json \
          --predicate-type "Attribute Report" --markdown stage-signoff.md \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

          jf evd create --predicate stage-runtime-trace.json \
          --predicate-type "Runtime Trace" \
          --release-bundle hc-bookverse-platform --release-bundle-version ${{ github.event.inputs.version }} \
          --project hc-bookverse --key-alias "nag-keys" --key "${{ secrets.BOOKVERSE_KEY }}"

      - name: Promote to STAGE
        run: |
          echo "Promoting hc-bookverse-platform version ${{ github.event.inputs.version }} to STAGE..."
          jfrog rbp hc-bookverse-platform ${{ github.event.inputs.version }} STAGE \
            --project=hc-bookverse \
            --include-repos='hc-bookverse-docker-external' \
            --promotion-type=move


      - name: Promote to PROD and Update Latest Tag
        run: |
          # Define the new version being promoted
          NEW_VERSION=${{ github.event.inputs.version }}
          RELEASE_BUNDLE_NAME=hc-bookverse-platform
          JFROG_RECORDS_API_URL="${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/$RELEASE_BUNDLE_NAME"

          # 1. Promote the new version to the PROD repository
          jfrog rbp hc-bookverse-platform ${{ github.event.inputs.version }} PROD \
            --project=hc-bookverse \
            --include-repos='hc-bookverse-docker-external-prod' \
            --promotion-type=move

          # 2. Apply the 'latest' tag to the newly promoted version, preserving existing properties.
          echo "Applying 'latest' tag to version $NEW_VERSION..."
          jfrog rba "$RELEASE_BUNDLE_NAME" "$NEW_VERSION" --tag=latest
          
          # 3. Use the API to find ALL OTHER release bundles currently tagged 'latest'
          echo "Searching for all other bundles tagged 'latest' to clean them up..."
          LATEST_BUNDLES_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "$JFROG_RECORDS_API_URL?project=hc-bookverse")
          
          # Use jq to create a list of versions to process, excluding the version we just promoted.
          PREVIOUS_LATEST_VERSIONS=$(echo "$LATEST_BUNDLES_JSON" | jq -r --arg new_ver "$NEW_VERSION" '.release_bundles[] | select(.bundle_tag == "latest" and .release_bundle_version != $new_ver) | .release_bundle_version')

          # 4. Loop through all found versions and restore their original tag
          if [[ -n "$PREVIOUS_LATEST_VERSIONS" ]]; then
            echo "Found previous latest versions to process: $PREVIOUS_LATEST_VERSIONS"
            for version in $PREVIOUS_LATEST_VERSIONS; do
              echo "--- Processing old version: $version ---"
              
              # Fetch the specific properties for this old version
              PROPS_JSON=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "$JFROG_RECORDS_API_URL/$version?project=hc-bookverse")
              OLD_CADENCE_TAG=$(echo "$PROPS_JSON" | jq -r '(.properties // [])[] | select(.key == "release.cadence") | .value')

              if [[ -n "$OLD_CADENCE_TAG" ]]; then
                echo "Restoring original tag for version $version to '$OLD_CADENCE_TAG'..."
                jfrog rba "$RELEASE_BUNDLE_NAME" "$version" --tag="$OLD_CADENCE_TAG"
              else
                echo "Warning: Could not find 'release.cadence' property for version $version. Applying 'prod-archived' tag instead."
                jfrog rba "$RELEASE_BUNDLE_NAME" "$version" --tag="prod-archived"
              fi
            done
            echo "--- Cleanup complete ---"
          else
            echo "No previous 'latest' versions found to clean up."
          fi

          echo "Promotion successful. Version $NEW_VERSION is now the single 'latest' release."
