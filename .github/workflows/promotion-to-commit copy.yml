name: 'Promotion to Commit'

on:
  # This is the original trigger from the webhook
  repository_dispatch:
    types: [rlm_promotion]
  
  # This is our new manual trigger for debugging
  workflow_dispatch:
    inputs:
      bundle_name:
        description: 'Test Bundle Name (e.g., bookverse-platform)'
        required: true
        default: 'bookverse-platform'
      bundle_version:
        description: 'Test Bundle Version (e.g., 4.0.0)'
        required: true
        default: '4.0.0'

jobs:
  update-gitops-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitOps Repo
        uses: actions/checkout@v3

      - name: Install jq and yq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JFROG_URL }}
          JF_USER: ${{ vars.JFROG_USER }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}
          JF_PROJECT: "bookverse"

      - name: Get Promoted Bundle Info
        id: get_info
        run: |
          # Use manual inputs if available, otherwise use webhook payload
          echo "BUNDLE_NAME=${{ github.event.inputs.bundle_name || github.event.client_payload.name }}" >> $GITHUB_ENV
          echo "BUNDLE_VERSION=${{ github.event.inputs.bundle_version || github.event.client_payload.version }}" >> $GITHUB_ENV

      - name: --- DEBUG: Print Initial Info ---
        run: |
          echo "Webhook/Input Bundle Name: ${{ env.BUNDLE_NAME }}"
          echo "Webhook/Input Bundle Version: ${{ env.BUNDLE_VERSION }}"
          echo "------------------------------------------------"
          echo "Initial values.yaml content:"
          cat helm/bookverse/values.yaml
          echo "------------------------------------------------"

      - name: Update Image Tags in values.yaml
        run: |
          # Use a direct API call to get the platform bundle contents
          PLATFORM_BUNDLE_CONTENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/${{ env.BUNDLE_NAME }}/${{ env.BUNDLE_VERSION }}?project=bookverse")
          echo "--- DEBUG: Platform Bundle API Response ---"
          echo "$PLATFORM_BUNDLE_CONTENTS"
          echo "-------------------------------------------"

          # Loop through each source microservice bundle within the platform bundle
          for service_bundle in $(echo "${PLATFORM_BUNDLE_CONTENTS}" | jq -r '.source.release_bundles[]'); do
            SERVICE_BUNDLE_NAME=$(echo "$service_bundle" | jq -r '.release_bundle_name')
            SERVICE_VERSION=$(echo "$service_bundle" | jq -r '.release_bundle_version')
            
            SERVICE_KEY=$(echo "$SERVICE_BUNDLE_NAME" | sed 's/-service//')

            echo "--- DEBUG: Processing microservice ---"
            echo "Bundle Name: $SERVICE_BUNDLE_NAME"
            echo "Bundle Version: $SERVICE_VERSION"
            echo "Service Key for YAML: $SERVICE_KEY"
            echo "------------------------------------"

            # Get the contents of the microservice bundle to find the actual Docker images
            SERVICE_CONTENTS=$(curl -s -H "Authorization: Bearer ${{ secrets.JFROG_ACCESS_TOKEN }}" "${{ vars.JFROG_URL }}/lifecycle/api/v2/release_bundle/records/${SERVICE_BUNDLE_NAME}/${SERVICE_VERSION}?project=bookverse")
            echo "--- DEBUG: Service Contents API Response ---"
            echo "$SERVICE_CONTENTS"
            echo "------------------------------------------"

            # Extract the frontend and backend image tags
            FRONTEND_IMAGE=$(echo "${SERVICE_CONTENTS}" | jq -r '.source.artifacts[] | select(.path | contains("frontend")) | .path')
            BACKEND_IMAGE=$(echo "${SERVICE_CONTENTS}" | jq -r '.source.artifacts[] | select(.path | contains("backend")) | .path')
            
            REGISTRY_URL=$(echo "${{ vars.JFROG_URL }}" | sed 's|https://||')
            FULL_FRONTEND_IMAGE="$REGISTRY_URL/$FRONTEND_IMAGE"
            FULL_BACKEND_IMAGE="$REGISTRY_URL/$BACKEND_IMAGE"

            echo "--- DEBUG: Extracted Image Tags ---"
            echo "Frontend Image: $FULL_FRONTEND_IMAGE"
            echo "Backend Image: $FULL_BACKEND_IMAGE"
            echo "---------------------------------"

            # Update the values.yaml file
            yq e -i ".services.$SERVICE_KEY.frontend.image = \"$FULL_FRONTEND_IMAGE\"" helm/bookverse/values.yaml
            yq e -i ".services.$SERVICE_KEY.backend.image = \"$FULL_BACKEND_IMAGE\"" helm/bookverse/values.yaml
          done

          echo "--- DEBUG: Final values.yaml content ---"
          cat helm/bookverse/values.yaml
          echo "----------------------------------------"

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add helm/bookverse/values.yaml
          git commit -m "Promoting ${{ env.BUNDLE_NAME }} ${{ env.BUNDLE_VERSION }} to production"
          # echo "--- DEBUG: Git push is commented out for safety ---"
          # git push